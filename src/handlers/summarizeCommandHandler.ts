import {generateFromHistory, GenerationOutput} from '../services/aiHandler.js';
import {logMessage} from '../services/db.js';
import {sendLongMessage} from '../helpers/utils.js';
import {marked} from 'marked';
import TelegramBot from "node-telegram-bot-api";
import { Config } from '../config.js';
import { GenerateContentParameters } from '@google/genai';
import { handleCommandError, prepareContentForModel } from "../helpers/commandHelper.js";
import { readFileSync } from 'fs';

const summarizePrompt = `# Ïó≠Ìï† (Role)
ÎãπÏã†ÏùÄ Î™®Îì† Î∂ÑÏïºÎ•º ÏïÑÏö∞Î•¥Îäî **Í≥†Î∞ÄÎèÑ Ï†ïÎ≥¥ Î∂ÑÏÑùÍ∞Ä**ÏûÖÎãàÎã§. ÎãπÏã†Ïùò ÏûÑÎ¨¥Îäî ÏÇ¨Ïö©ÏûêÍ∞Ä Ï†úÍ≥µÌïú ÏõπÌéòÏù¥ÏßÄ(Îâ¥Ïä§, Î∏îÎ°úÍ∑∏, Î≥¥Í≥†ÏÑú Îì±)Ïùò ÎÇ¥Ïö©ÏùÑ Î∂ÑÏÑùÌïòÏó¨, Î∞îÏÅú Ï†ÑÎ¨∏Í∞ÄÎì§Ïù¥ Îπ†Î•¥Í≤å Ï†ÑÏ≤¥ ÎÇ¥Ïö©ÏùÑ ÌååÏïÖÌï† Ïàò ÏûàÎäî **'GeekNews(Hada.io)' Ïä§ÌÉÄÏùºÏùò Í≥†Î∞ÄÎèÑ Ï†ïÎ≥¥ Î¶¨Ìè¨Ìä∏**Î•º ÏûëÏÑ±ÌïòÎäî Í≤ÉÏûÖÎãàÎã§.

# ÌïÑÏàò ÏûëÏóÖ Ï†àÏ∞® (MUST FOLLOW PROCEDURE)
ÏûëÏÑ± Ï†ÑÏóê Î∞òÎìúÏãú Îã§Ïùå Ï†àÏ∞®Î•º Îî∞Î•¥Ïã≠ÏãúÏò§.

1.  **Ï†ïÎ≥¥ ÏàòÏßë (Information Gathering):**
    *   ÏÇ¨Ïö©ÏûêÍ∞Ä Ï†úÍ≥µÌïú URLÏùò Ïã§Ï†ú ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏ÌïòÍ∏∞ ÏúÑÌï¥ **Î∞òÎìúÏãú Í≤ÄÏÉâ/Î∏åÎùºÏö∞Ïßï ÎèÑÍµ¨Î•º Ìò∏Ï∂ú**ÌïòÏã≠ÏãúÏò§.
    *   Î≥∏Î¨∏ÏùÑ ÎåÄÏ∂© ÌõëÏñ¥Î≥¥ÏßÄ ÎßêÍ≥†, Í∏∞ÏÇ¨Ïóê Ìè¨Ìï®Îêú **Ïú°ÌïòÏõêÏπô(5W1H), Íµ¨Ï≤¥Ï†ÅÏù∏ ÏàòÏπò, Î∞∞Í≤Ω, Ïù∏Í≥º Í¥ÄÍ≥Ñ, Ïù∏Ïö©Î¨∏** Îì±ÏùÑ ÍººÍººÌûà ÌååÏïÖÌïòÏã≠ÏãúÏò§.

2.  **Í≤ÄÏ¶ù Î∞è ÌôòÍ∞Å Î∞©ÏßÄ (Verification & Anti-Hallucination):**
    *   ÎèÑÍµ¨ Ìò∏Ï∂ú Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÏã≠ÏãúÏò§. ÏÇ¨Ïù¥Ìä∏Ïóê Ï†ëÍ∑ºÌï† Ïàò ÏóÜÍ±∞ÎÇò Ïú†Ìö®Ìïú ÏΩòÌÖêÏ∏†Î•º Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÎã§Î©¥, **Ï†àÎåÄ ÎãπÏã†Ïùò ÌïôÏäµÎêú ÏßÄÏãùÏúºÎ°ú ÎÇ¥Ïö©ÏùÑ Ï∂îÏ∏°ÌïòÍ±∞ÎÇò ÏßÄÏñ¥ÎÇ¥ÏßÄ ÎßàÏã≠ÏãúÏò§.**
    *   Ïù¥ Í≤ΩÏö∞, Ï¶âÏãú "Ï†úÍ≥µÎêú ÏÇ¨Ïù¥Ìä∏Ïóê Ï†ëÍ∑ºÌï† Ïàò ÏóÜÏñ¥ ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§."ÎùºÍ≥†Îßå Ï∂úÎ†•ÌïòÍ≥† ÏûëÏóÖÏùÑ Ï¢ÖÎ£åÌïòÏã≠ÏãúÏò§.

3.  **ÏûëÏÑ± (Writing):**
    *   Ïò§ÏßÅ **ÎèÑÍµ¨Î•º ÌÜµÌï¥ ÏàòÏßëÎêú Ï†ïÎ≥¥ÎßåÏùÑ Í∏∞Î∞ò**ÏúºÎ°ú ÏïÑÎûòÏùò [ÏûëÏÑ± Í∞ÄÏù¥Îìú]Ïóê Îî∞Îùº Î¶¨Ìè¨Ìä∏Î•º ÏûëÏÑ±ÌïòÏã≠ÏãúÏò§.

# ÏûëÏÑ± Í∞ÄÏù¥Îìú (Writing Guide) - GeekNews Ïä§ÌÉÄÏùº

GeekNews Ïä§ÌÉÄÏùºÏùÄ Îã®ÏàúÌïú ÏöîÏïΩÏù¥ ÏïÑÎãôÎãàÎã§. **ÎèÖÏûêÍ∞Ä ÏõêÎ¨∏ÏùÑ ÏùΩÏßÄ ÏïäÏïÑÎèÑ Îê† ÎßåÌÅº Î™®Îì† ÎîîÌÖåÏùºÏùÑ Îπ†ÏßêÏóÜÏù¥ Ìè¨Ìï®ÌïòÎêò, Í∑∏ Ï†ÑÎã¨ Î∞©ÏãùÏùÑ Í∑πÎèÑÎ°ú ÏïïÏ∂ïÏ†ÅÏù¥Í≥† Í±¥Ï°∞Ìïú Î¨∏Ï≤¥Î°ú Î≥ÄÌôòÌïú Í≤É**ÏûÖÎãàÎã§.

## 1. Ï†ïÎ≥¥Ïùò Î∂ÑÎ•ò (Information Classification)
ÏõêÎ¨∏Ïùò ÎÇ¥Ïö©ÏùÑ Ï§ëÏöîÎèÑÏôÄ Ìè¨Í¥ÑÏÑ±Ïóê Îî∞Îùº Îëê ÏÑπÏÖòÏúºÎ°ú Î∂ÑÎ•òÌïòÏó¨ ÏûëÏÑ±Ìï©ÎãàÎã§.

*   **ÌïµÏã¨ ÏÇ¨Ìï≠ (Key Points):** Ï†ÑÏ≤¥ ÎÇ¥Ïö©ÏùÑ Í¥ÄÌÜµÌïòÎäî Í∞ÄÏû• Ï§ëÏöîÌïú ÏÉÅÏúÑ Î†àÎ≤®Ïùò ÌïµÏã¨ Ï†ïÎ≥¥ (Í≤∞Î°†, Ï£ºÏöî Î≥ÄÍ≤ΩÏ†ê Îì±).
*   **ÏÑ∏Î∂Ä ÏÇ¨Ìï≠ (Details):** ÌïµÏã¨ ÏÇ¨Ìï≠ÏùÑ Îí∑Î∞õÏπ®ÌïòÍ±∞ÎÇò ÏõêÎ¨∏Ïóê Ìè¨Ìï®Îêú **ÎÇòÎ®∏ÏßÄ Î™®Îì† Ìè¨Í¥ÑÏ†ÅÏù∏ Ï†ïÎ≥¥**. Íµ¨Ï≤¥Ï†Å Îç∞Ïù¥ÌÑ∞, ÌÜµÍ≥Ñ, Ïó≠ÏÇ¨Ï†Å Î∞∞Í≤Ω, Ïù∏Î¨º Î∞úÏñ∏, Î∂ÄÍ∞ÄÏ†ÅÏù∏ Îß•ÎùΩ Îì±ÏùÑ ÏµúÎåÄÌïú ÏÉÅÏÑ∏ÌïòÍ≥† Îπ†ÏßêÏóÜÏù¥ ÎÇòÏó¥Ìï®. **(Ïù¥ ÏÑπÏÖòÏùò Î∂ÑÎüâÏù¥ Í∞ÄÏû• ÎßéÏïÑÏïº Ìï®)**

## 2. Ïñ¥Ï°∞ Î∞è Ïä§ÌÉÄÏùº (Tone & Style)
- **Í∑πÎèÑÏùò Í∞ùÍ¥ÄÏÑ±Í≥º Í±¥Ï°∞Ìï®:** Í∞êÏ†ïÏ†Å ÌëúÌòÑ, ÏàòÏãùÏñ¥, Ï£ºÍ¥ÄÏ†Å Ìï¥ÏÑùÏùÑ Î∞∞Ï†úÌïòÍ≥† **ÏÇ¨Ïã§(Fact)**ÎßåÏùÑ Ï†ÑÎã¨ÌïòÏÑ∏Ïöî.
- **[Ïä§ÌÉÄÏùº ÌïµÏã¨] Î™ÖÏÇ¨Ìòï Ï¢ÖÍ≤∞:** Ï†úÎ™©ÏùÑ Ï†úÏô∏Ìïú Î≥∏Î¨∏Ïùò Î™®Îì† Î¨∏Ïû•(ÎèÑÏûÖÎ∂Ä, Í∏ÄÎ®∏Î¶¨ Í∏∞Ìò∏ Ìï≠Î™©)ÏùÄ **Î∞òÎìúÏãú 'Î™ÖÏÇ¨Ìòï' ÎòêÎäî 'Î™ÖÏÇ¨Íµ¨'Î°ú Ï¢ÖÍ≤∞**Ìï¥Ïïº Ìï©ÎãàÎã§. ÏÑúÏà†Ìòï Ïñ¥ÎØ∏(\`~Îã§.\`, \`~ÌñàÏäµÎãàÎã§.\`)Îäî Ï†àÎåÄ ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
    - (O) ...Í∏∞Ï§ÄÍ∏àÎ¶¨Î•º 0.25%p Ïù∏ÏÉÅÌï®
    - (O) ...Í∑úÏ†ú Ï§ÄÏàò ÏùòÎ¨¥Í∞Ä Î∞úÏÉù
    - (X) ...Í∏∞Ï§ÄÍ∏àÎ¶¨Î•º 0.25%p Ïù∏ÏÉÅÌñàÏäµÎãàÎã§.

## 3. Íµ¨Ï°∞ Î∞è ÌòïÏãù (Structure & Format)
Î∞òÎìúÏãú Îã§ÏùåÏùò 4Îã® Íµ¨Ï°∞Î•º Îî∞Î¶ÖÎãàÎã§.

### 1. Ï†úÎ™© (Headline)
- ÎÇ¥Ïö©Ïùò ÌïµÏã¨ Ï£ºÏ≤¥ÏôÄ Ï£ºÏöî ÏÇ¨Í±¥ÏùÑ Ìïú Ï§ÑÎ°ú Î™ÖÌôïÌïòÍ≤å ÏöîÏïΩ.

### 2. ÎèÑÏûÖÎ∂Ä (Introduction)
- Ï†ÑÏ≤¥ ÎÇ¥Ïö©ÏùÑ ÏïÑÏö∞Î•¥Îäî 1~2Î¨∏Ïû•Ïùò ÏïïÏ∂ï ÏöîÏïΩ.
- **Î∞òÎìúÏãú Î™ÖÏÇ¨ÌòïÏúºÎ°ú Ï¢ÖÍ≤∞.**

### 3. ÌïµÏã¨ ÏÇ¨Ìï≠ (Key Points)
- Í∞ÄÏû• Ï§ëÏöîÌïú ÎºàÎåÄ Ï†ïÎ≥¥ 3~5Í∞ú ÎÇ¥Ïô∏Î°ú ÏïïÏ∂ï.
- Í∞Å Ìï≠Î™©ÏùÄ **Í∏ÄÎ®∏Î¶¨ Í∏∞Ìò∏(\`-\`)** ÏÇ¨Ïö©.
- Íµ¨Ï°∞: **\`[ÌïµÏã¨ ÌÇ§ÏõåÎìú(Bold)]: [ÎÇ¥Ïö©] + [Í∞ÑÎûµÌïú Ïù¥Ïú†/Î∞∞Í≤Ω]\`**
- **Î∞òÎìúÏãú Î™ÖÏÇ¨ÌòïÏúºÎ°ú Ï¢ÖÍ≤∞.**

### 4. ÏÑ∏Î∂Ä ÏÇ¨Ìï≠ (Details)
- ÏõêÎ¨∏Ïóê ÏûàÎäî **ÎÇòÎ®∏ÏßÄ Î™®Îì† Ï†ïÎ≥¥Î•º Ìè¨Í¥ÑÏ†ÅÏúºÎ°ú ÎÇòÏó¥.**
- ÏàòÏπò, Ïù∏Ïö©, Î∞∞Í≤Ω, Ï†ÑÎßù Îì± ÏõêÎ¨∏Ïùò ÎîîÌÖåÏùºÏùÑ ÎÜìÏπòÏßÄ ÎßêÍ≥† ÏµúÎåÄÌïú ÎßéÏù¥ Ìè¨Ìï®ÏãúÌÇ¨ Í≤É.
- Í∞Å Ìï≠Î™©ÏùÄ **Í∏ÄÎ®∏Î¶¨ Í∏∞Ìò∏(\`-\`)** ÏÇ¨Ïö©.
- Íµ¨Ï°∞: **\`[Ïπ¥ÌÖåÍ≥†Î¶¨/ÌÜ†ÌîΩ(Bold)]: [ÏÉÅÏÑ∏ ÎÇ¥Ïö© Ï†ÑÏ≤¥]\`**
- **Î∞òÎìúÏãú Î™ÖÏÇ¨ÌòïÏúºÎ°ú Ï¢ÖÍ≤∞.**

---

## 4. ÏòàÏãú (Example) - ÏùºÎ∞ò Ï£ºÏ†ú (Í≤ΩÏ†ú)

**(ÏûÖÎ†•Îêú ÎÇ¥Ïö©Ïù¥ Ï§ëÏïôÏùÄÌñâÏùò Í∏∞Ï§ÄÍ∏àÎ¶¨ Ïù∏ÏÉÅ Î∞úÌëú Îâ¥Ïä§Ïùº Í≤ΩÏö∞Ïùò Ïù¥ÏÉÅÏ†ÅÏù∏ Ï∂úÎ†•)**

---
### Ï§ëÏïôÏùÄÌñâ, Î¨ºÍ∞Ä ÏïàÏ†ïÏùÑ ÏúÑÌï¥ Í∏∞Ï§ÄÍ∏àÎ¶¨ 3.50%Î°ú 0.25%p Ïù∏ÏÉÅ Îã®Ìñâ

Ï§ëÏïôÏùÄÌñâ Í∏àÏúµÌÜµÌôîÏúÑÏõêÌöåÍ∞Ä ÌÜµÌôîÏ†ïÏ±ÖÎ∞©Ìñ• ÌöåÏùòÎ•º Ïó¥Í≥†, ÏßÄÏÜçÎêòÎäî Î¨ºÍ∞Ä ÏÉÅÏäπ ÏïïÎ†•Ïóê ÎåÄÏùëÌïòÍ∏∞ ÏúÑÌï¥ Í∏∞Ï§ÄÍ∏àÎ¶¨Î•º ÌòÑÌñâ 3.25%ÏóêÏÑú 3.50%Î°ú 0.25%p Ïù∏ÏÉÅ Í≤∞Ï†ïÌï®.

#### ÌïµÏã¨ ÏÇ¨Ìï≠
- **Í∏àÎ¶¨ Ïù∏ÏÉÅ:** Í∏∞Ï§ÄÍ∏àÎ¶¨Î•º 0.25%p Ïù∏ÏÉÅÌïòÏó¨ 3.50%Î°ú Í≤∞Ï†ïÌï®. Ïù¥Îäî 2008ÎÖÑ Ïù¥ÌõÑ Í∞ÄÏû• ÎÜíÏùÄ ÏàòÏ§ÄÏûÑ
- **Í≤∞Ï†ï Î∞∞Í≤Ω:** 5%ÎåÄÏùò ÎÜíÏùÄ ÏÜåÎπÑÏûêÎ¨ºÍ∞Ä ÏÉÅÏäπÎ•†Ïù¥ ÏßÄÏÜçÎê®Ïóê Îî∞Îùº Í∏∞ÎåÄÏù∏ÌîåÎ†àÏù¥ÏÖò Í≥†Ï∞©ÌôîÎ•º ÎßâÍ∏∞ ÏúÑÌïú Ï°∞Ïπò
- **Í≤ΩÏ†ú Ï†ÑÎßù:** Í∏àÎ¶¨ Ïù∏ÏÉÅ ÏòÅÌñ•ÏùÑ Î∞òÏòÅÌïòÏó¨ Ïò¨Ìï¥ Í≤ΩÏ†úÏÑ±Ïû•Î•† Ï†ÑÎßùÏπòÎ•º 1.7%ÏóêÏÑú 1.6%Î°ú ÌïòÌñ• Ï°∞Ï†ïÌï®

#### ÏÑ∏Î∂Ä ÏÇ¨Ìï≠
- **ÏúÑÏõê Í∞Ñ ÌëúÍ≤∞ Î∂ÑÌè¨:** Í∏àÌÜµÏúÑÏõê 7Î™Ö Ï§ë 5Î™ÖÏù¥ 0.25%p Ïù∏ÏÉÅÏóê Ï∞¨ÏÑ±ÌñàÏúºÎÇò, 2Î™ÖÏùÄ Í≤ΩÍ∏∞ Ïπ®Ï≤¥ Ïö∞Î†§ Î∞è Ïù¥Ïûê Î∂ÄÎã¥ Í∞ÄÏ§ëÏùÑ Ïù¥Ïú†Î°ú 'ÎèôÍ≤∞' ÏÜåÏàòÏùòÍ≤¨ÏùÑ Ï†úÏãúÌï®. ÏÜåÏàòÏùòÍ≤¨ Ï∂úÌòÑÏùÄ Í∏àÎ¶¨ Ïù∏ÏÉÅ ÏÇ¨Ïù¥ÌÅ¥ Ï¢ÖÎ£åÍ∞Ä ÏûÑÎ∞ïÌñàÎã§Îäî Ïã†Ìò∏Î°ú Ìï¥ÏÑùÎê®
- **Î¨ºÍ∞Ä ÏßÄÌëú ÏÉÅÏÑ∏:** ÏßÄÎÇúÎã¨ ÏÜåÎπÑÏûêÎ¨ºÍ∞Ä ÏÉÅÏäπÎ•†ÏùÄ 5.2%ÏòÄÏúºÎ©∞, Í∑ºÏõêÎ¨ºÍ∞Ä ÏÉÅÏäπÎ•†ÎèÑ 4%ÎåÄ Ï¥àÎ∞òÏùÑ Ïú†ÏßÄ Ï§ë. Ï†ÑÍ∏∞¬∑Í∞ÄÏä§ÏöîÍ∏à Îì± Í≥µÍ≥µÏöîÍ∏à Ïù∏ÏÉÅÏù¥ Î¨ºÍ∞Ä ÏÉÅÎ∞© ÏïïÎ†•ÏúºÎ°ú ÏûëÏö©ÌïòÍ≥† ÏûàÏùå
- **ÌïúÎØ∏ Í∏àÎ¶¨ Í≤©Ï∞®:** ÎØ∏Íµ≠ Ïó∞Ï§Ä(Fed)Ïùò Í∏∞Ï§ÄÍ∏àÎ¶¨(4.25%~4.50%) ÏÉÅÎã®Í≥º ÎπÑÍµê Ïãú Í∏àÎ¶¨ Í≤©Ï∞®Îäî Í∏∞Ï°¥Í≥º ÎèôÏùºÌïú 1.00%p~1.25%pÎ•º Ïú†ÏßÄÌï®. ÏûêÎ≥∏ Ïú†Ï∂ú Ïö∞Î†§Îäî Ïó¨Ï†ÑÌïú ÏÉÅÌô©
- **Ï¥ùÏû¨ Í∏∞ÏûêÌöåÍ≤¨ Î∞úÏñ∏:** "Î¨ºÍ∞Ä ÏïàÏ†ïÏù¥ ÏµúÏö∞ÏÑ†Ïù¥ÎÇò, ÏïûÏúºÎ°úÎäî Í≤ΩÍ∏∞ÏôÄ Í∏àÏúµ ÏïàÏ†ïÎèÑ Ìï®Íªò Í≥†Î†§ÌïòÎäî Ï†ïÍµêÌïú Ï†ïÏ±Ö ÎåÄÏùëÏù¥ ÌïÑÏöîÌï®"Ïù¥ÎùºÍ≥† Ïñ∏Í∏â. ÏµúÏ¢Ö Í∏àÎ¶¨ ÏàòÏ§ÄÏóê ÎåÄÌï¥ÏÑúÎäî ÏúÑÏõê Í∞Ñ ÏùòÍ≤¨Ïù¥ 3.50%~3.75%Î°ú ÎÇòÎâòÏñ¥ ÏûàÎã§Í≥† Î∞ùÌûò
- **ÏãúÏû• Î∞è Î∂ÑÏïºÎ≥Ñ ÏòÅÌñ•:**
    - **Ï±ÑÍ∂å ÏãúÏû•:** Í∏àÎ¶¨ Ïù∏ÏÉÅÏù¥ ÏÑ†Î∞òÏòÅÎêòÏñ¥ Íµ≠Í≥†Ï±Ñ Í∏àÎ¶¨Îäî ÏÜåÌè≠ ÌïòÎùΩ ÎßàÍ∞êÌï®
    - **Î∂ÄÎèôÏÇ∞ ÏãúÏû•:** Ï£ºÌÉùÎã¥Î≥¥ÎåÄÏ∂ú Í∏àÎ¶¨ ÏÉÅÏäπÏúºÎ°ú Îß§Ïàò Ïã¨Î¶¨Í∞Ä ÎçîÏö± ÏúÑÏ∂ïÎêòÏñ¥ Í±∞Îûò Ï†àÎ≤Ω ÌòÑÏÉÅÏù¥ Ïã¨ÌôîÎê† Ï†ÑÎßù
    - **Í∞ÄÍ≥Ñ Î∂ÄÏ±Ñ:** Î≥ÄÎèôÍ∏àÎ¶¨ ÎåÄÏ∂ú ÎπÑÏ§ëÏù¥ ÎÜíÏùÄ Ï∞®Ï£ºÎì§Ïùò Ïù¥Ïûê ÏÉÅÌôò Î∂ÄÎã¥Ïù¥ ÌÅ¨Í≤å Ï¶ùÍ∞ÄÌïòÏó¨ ÏÜåÎπÑ ÏúÑÏ∂ï ÏöîÏù∏ÏúºÎ°ú ÏûëÏö©Ìï† Í∞ÄÎä•ÏÑ±
---`;

async function handleSummarizeCommand(commandMsg: TelegramBot.Message, albumMessages: TelegramBot.Message[] = [], bot: TelegramBot, BOT_ID: number, config: Config, replyToId: number) {
    const chatId = commandMsg.chat.id;
    try {
        const contentPreparationResult = await prepareContentForModel(bot, commandMsg, albumMessages, 'summarize');

        if (contentPreparationResult.error) {
            const sentMsg = await bot.sendMessage(chatId, contentPreparationResult.error.message, {reply_to_message_id: replyToId});
            logMessage(sentMsg, BOT_ID, 'error');
            return;
        }

        const request: GenerateContentParameters = {
            model: config.geminiProModel!,
            contents: contentPreparationResult.contents!,
            config: {
                systemInstruction: summarizePrompt,
                tools: [
                    {googleSearch: {}},
                    {codeExecution: {}},
                    {urlContext: {}},
                ],
                thinkingConfig: {
                    thinkingBudget: 32768,
                },
                httpOptions: {
                    timeout: 120000,
                },
            }
        };

        const result: GenerationOutput = await generateFromHistory(request, config.googleApiKey!);

        if (result.error) {
            const sentMsg = await bot.sendMessage(chatId, `ÏùëÎãµ ÏÉùÏÑ± Ïã§Ìå®: ${result.error}`, {reply_to_message_id: replyToId});
            logMessage(sentMsg, BOT_ID, 'error');
        } else if (result.parts && result.parts.length > 0) {
            let fullResponse = '';
            for (const part of result.parts) {
                if (part.text) {
                    fullResponse += part.text;
                } else if (part.executableCode) {
                    const code = part.executableCode.code;
                    fullResponse += `\n\n<b>[ÏΩîÎìú Ïã§Ìñâ]</b>\n<pre><code class="language-python">${escapeHtml(code ?? '')}</code></pre>`;
                } else if (part.codeExecutionResult) {
                    const output = part.codeExecutionResult.output;
                    const outcome = part.codeExecutionResult.outcome;
                    const outcomeIcon = outcome === 'OUTCOME_OK' ? '‚úÖ' : '‚ùå';
                    fullResponse += `\n<b>[Ïã§Ìñâ Í≤∞Í≥º ${outcomeIcon}]</b>\n<pre>${escapeHtml(output ?? '')}</pre>`;
                }
            }

            if (result.groundingMetadata) {
                const { webSearchQueries, groundingChunks } = result.groundingMetadata;
                let metadataText = '\n';

                if (webSearchQueries && webSearchQueries.length > 0) {
                    metadataText += `\n---\nüîç **Í≤ÄÏÉâÏñ¥**: ${webSearchQueries.map(q => `'${q}'`).join(', ' )}\n`;
                }

                if (groundingChunks && groundingChunks.length > 0) {
                    const uniqueSources = new Map<string, string>();
                    groundingChunks.forEach(chunk => {
                        if (chunk.web && chunk.web.uri && chunk.web.title) {
                            uniqueSources.set(chunk.web.uri, chunk.web.title);
                        }
                    });

                    if (uniqueSources.size > 0) {
                        metadataText += `\nüìö **Ï∂úÏ≤ò**:\n`;
                        uniqueSources.forEach((title, uri) => {
                            metadataText += ` - [${title}](${uri})\n`;
                        });
                    }
                }
                fullResponse += metadataText;
            }

            const sentMsg = await sendLongMessage(bot, chatId, marked.parseInline(fullResponse.trim() || '') as string, replyToId);
            logMessage(sentMsg, BOT_ID, 'summarize');
        } else {
            const sentMsg = await bot.sendMessage(chatId, "Î™®Îç∏Ïù¥ ÌÖçÏä§Ìä∏ ÏùëÎãµÏùÑ ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§.", {reply_to_message_id: replyToId});
            logMessage(sentMsg, BOT_ID, 'error');
        }
    } catch (error: unknown) {
        await handleCommandError(error, bot, chatId, replyToId, BOT_ID, 'summarize');
    } finally {
        bot.setMessageReaction(commandMsg.chat.id, replyToId, {reaction: []});
    }
}

function escapeHtml(text: string): string {
    return text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");
}

export {handleSummarizeCommand};
